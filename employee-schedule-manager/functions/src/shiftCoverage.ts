// Shift Coverage Request Cloud Functions
// Add, claim, return, and complete coverage requests with audit trail

// Remove unused imports to fix compile errors

// Add a new shift coverage request














































































































});  return { success: true };  // Optionally, update the shift document to reflect the new owner or revert to original  });    auditTrail: admin.firestore.FieldValue.arrayUnion(auditEntry),    status: 'Completed',  await reqRef.update({  };    details: '',    userName: context.auth.token.name || '',    userId: context.auth.uid,    action: 'Completed',    timestamp: new Date().toISOString(),  const auditEntry = {  }    throw new functions.https.HttpsError('permission-denied', 'Not authorized.');  if (context.auth.token.role !== 'admin' && context.auth.uid !== reqData.originalOwnerId) {  // Only admin or original owner can complete  if (reqData.status !== 'Claimed') throw new functions.https.HttpsError('failed-precondition', 'Request is not claimed.');  const reqData = reqSnap.data();  if (!reqSnap.exists) throw new functions.https.HttpsError('not-found', 'Request not found.');  const reqSnap = await reqRef.get();  const reqRef = admin.firestore().collection('shiftCoverageRequests').doc(requestId);  if (!requestId) throw new functions.https.HttpsError('invalid-argument', 'Missing requestId.');  const { requestId } = data;  if (!context.auth) throw new functions.https.HttpsError('unauthenticated', 'Must be logged in.');exports.completeShiftCoverageRequest = functions.https.onCall(async (data: any, context: any) => {// Complete a shift coverage request (admin or original owner)});  return { success: true };  });    auditTrail: admin.firestore.FieldValue.arrayUnion(auditEntry),    claimedByName: admin.firestore.FieldValue.delete(),    claimedById: admin.firestore.FieldValue.delete(),    status: 'Open',  await reqRef.update({  };    details: '',    userName: context.auth.token.name || '',    userId: context.auth.uid,    action: 'Returned',    timestamp: new Date().toISOString(),  const auditEntry = {  }    throw new functions.https.HttpsError('failed-precondition', 'You cannot return this request.');  if (reqData.status !== 'Claimed' || reqData.claimedById !== context.auth.uid) {  const reqData = reqSnap.data();  if (!reqSnap.exists) throw new functions.https.HttpsError('not-found', 'Request not found.');  const reqSnap = await reqRef.get();  const reqRef = admin.firestore().collection('shiftCoverageRequests').doc(requestId);  if (!requestId) throw new functions.https.HttpsError('invalid-argument', 'Missing requestId.');  const { requestId } = data;  if (!context.auth) throw new functions.https.HttpsError('unauthenticated', 'Must be logged in.');exports.returnShiftCoverageRequest = functions.https.onCall(async (data: any, context: any) => {// Return a claimed shift coverage request});  return { success: true };  });    auditTrail: admin.firestore.FieldValue.arrayUnion(auditEntry),    claimedByName: context.auth.token.name || '',    claimedById: context.auth.uid,    status: 'Claimed',  await reqRef.update({  };    details: '',    userName: context.auth.token.name || '',    userId: context.auth.uid,    action: 'Claimed',    timestamp: new Date().toISOString(),  const auditEntry = {  if (reqData.status !== 'Open') throw new functions.https.HttpsError('failed-precondition', 'Request is not open.');  const reqData = reqSnap.data();  if (!reqSnap.exists) throw new functions.https.HttpsError('not-found', 'Request not found.');  const reqSnap = await reqRef.get();  const reqRef = admin.firestore().collection('shiftCoverageRequests').doc(requestId);  if (!requestId) throw new functions.https.HttpsError('invalid-argument', 'Missing requestId.');  const { requestId } = data;  if (!context.auth) throw new functions.https.HttpsError('unauthenticated', 'Must be logged in.');exports.claimShiftCoverageRequest = functions.https.onCall(async (data: any, context: any) => {// Claim a shift coverage request});  return { id: docRef.id };  });    auditTrail: [auditEntry],    status: 'Open',    requestedCoverageEnd,    requestedCoverageStart,    endTime,    startTime,    date,    originalOwnerName,    originalOwnerId,    shiftId,  const docRef = await admin.firestore().collection('shiftCoverageRequests').add({  };    details: '',    userName: context.auth.token.name || '',    userId: context.auth.uid,    action: 'Requested',    timestamp: new Date().toISOString(),  const auditEntry = {  }    throw new functions.https.HttpsError('invalid-argument', 'Missing required fields.');  if (!shiftId || !originalOwnerId || !date || !startTime || !endTime || !requestedCoverageStart || !requestedCoverageEnd) {  const { shiftId, originalOwnerId, originalOwnerName, date, startTime, endTime, requestedCoverageStart, requestedCoverageEnd } = data;  if (!context.auth) throw new functions.https.HttpsError('unauthenticated', 'Must be logged in.');exports.addShiftCoverageRequest = functions.https.onCall(async (data: any, context: any) => {